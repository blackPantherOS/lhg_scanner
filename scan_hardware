#!/usr/bin/perl

# This script scans your hardware and sends the collected data
# to linux-hardware-guide.com
# It uses standard tools like lsusb, lscpi, lsb_release to gather data, 
# sends it to our database, and then creates a link to the result page.
#
# It is intended as a simple method to add your hardware components to 
# the Linux-Hardware-Guide database.
#
# Latest version of the script can be found at:
# https://github.com/paralib5/lhg_scanner


$VERSION = "0.3.10";

$DEBUG = 0;

# The Linux-Hardware-Guide library server
$upload_server="http://library.linux-hardware-guide.com";
  
$TMPDIR = "/tmp/LHG.".$$;

interpret_commandline_options();
check_configuration_file();

print "***********\n";
print "* This is the hardware scan program of \n";
print "* http://www.Linux-Hardware-Guide.com\n";
print "* \n";
print "* It will check your hardware and send the results to \n";
print "* the Linux-Hardware-Guide\n";
print "* \n";
print "* Log outputs will be stored in: ";
print "$TMPDIR \n";
print "***********\n";
print "\n";
print "\n";

my @allfiles = ("alsa_cards.txt","alsa_devices.txt","aplay.txt","cpuinfo.txt",
                    "dd.err.txt","dd.txt","dmesg.txt","lsb_release.txt","lspci.txt",
                    "lsusb.txt","lsusb_v.err.txt","lsusb_v.txt","scanimage.txt",
                    "version.txt","hdparm.txt","hdparm_direct.txt");

# Harddisk check only possible as root. 
# However, this test (and therefore root privileges) is not mandatory
check_root();

print "Collecting data:\n";

system ("mkdir $TMPDIR");

# System information
print " -> general system information \n";
system ("lsb_release -a > $TMPDIR/lsb_release.txt");
system ("cat /etc/*-release >> $TMPDIR/lsb_release.txt");
system ("cat /proc/version > $TMPDIR/version.txt");

# General HW overview
print " -> general hardware overview \n";
system ("lsusb > $TMPDIR/lsusb.txt");
system ("lsusb -v > $TMPDIR/lsusb_v.txt 2> $TMPDIR/lsusb_v.err.txt");

# lspci needed to be started with absolute path for some distribution (e.g. OpenSUSE)
if (-e "/usr/bin/lspci") {
    system ("/usr/bin/lspci -nnk > $TMPDIR/lspci.txt");
}elsif (-e "/sbin/lspci") {
    system ("/sbin/lspci -nnk > $TMPDIR/lspci.txt");
}else{
    system ("lspci -nnk > $TMPDIR/lspci.txt");
}
system ("cat /proc/cpuinfo > $TMPDIR/cpuinfo.txt");

# system boot messages
print " -> boot messages \n";
system ("dmesg > $TMPDIR/dmesg.txt");

# system boot messages
print " -> graphic card/drivers \n";
check_graphics();

# Scanner search
print " -> checking scanners \n";
system ("scanimage -L > $TMPDIR/scanimage.txt");

# Sound system information
print " -> checking sound system \n";
system ("cat /proc/asound/devices > $TMPDIR/alsa_devices.txt");
system ("cat /proc/asound/cards  > $TMPDIR/alsa_cards.txt");
system ("aplay -l > $TMPDIR/aplay.txt");


# HDD measurement
print " -> checking harddisk\n";
check_drives();
system("dd if=/dev/zero of=/tmp/dd_tempfile bs=1M count=1024 conv=fdatasync,notrunc >  $TMPDIR/dd.txt 2> $TMPDIR/dd.err.txt");
#only possible as root
if ( $< == 0 ) { 
    system ("hdparm -tT /dev/sda > $TMPDIR/hdparm.txt");
    system("hdparm -tT --direct /dev/sda  > $TMPDIR/hdparm_direct.txt");
}else{
    #create empty dummy file
    system ("touch $TMPDIR/hdparm.txt");
    system ("touch $TMPDIR/hdparm_direct.txt");
}

# Equipment paired with Logitech Unifying Receivers is hard to distinguish
# We will need some help by other tools here
print " -> checking Unifying Receivers \n";
check_unifying_receivers();
read_dmi();

misc_stats();

print " -> Make data anonymous\n";
anonymize_data();

print "done\n";

print "\nUploading data\n";

#DEBUG MODE
#exit 0;
#

if ($DEBUG == 0) {
    # Upload request and open browser
    upload_files();
    exit 0;
} else {
    exit 0;
}    


$mailtext ="Please fill out the following mail body:

1) Hardware to be added to the database: 
(Please enter the hardware name)

2) Hardware URL: 
(Please add a link to the manufacturer's or Amazon's web site where details of the hardware can be found)

3) Describe the Linux compatibility of the Hardware:
(e.g. works out-of-the-box, necessary configuration steps)

4) Please send this mail with its attachments to webmaster\@linux-hardware-guide.com

Thank you for your submission!
";

$files = create_attachment_string();

system ("thunderbird -compose \"to='webmaster\@linux-hardware-guide.com',subject='Linux Hardware - automatic scan',body='$mailtext',attachment='$files'\"");

exit 0;

sub upload_files {
    
  
  my $sid;
  use LWP::UserAgent;  
  use HTTP::Request::Common;
  
  #get session ID
  $request = HTTP::Request->new(GET => $upload_server."/uploadrequest.php?v=0.2");
  $ua = LWP::UserAgent->new;
  $response = $ua->request($request);
  $sid = $response->content;
  
  #$ua = LWP::UserAgent->new;
  #upload files
  $response = $ua->request(POST $upload_server."/uploadfiles.php", 

               Content_Type => 'form-data',
               
               Content      => [ sid     => $sid,
                                file1    => ["$TMPDIR/".$allfiles[0]],
                                file2    => ["$TMPDIR/".$allfiles[1]],
                                file3    => ["$TMPDIR/".$allfiles[2]],
                                file4    => ["$TMPDIR/".$allfiles[3]],
                                file5    => ["$TMPDIR/".$allfiles[4]],
                                file6    => ["$TMPDIR/".$allfiles[5]],
                                file7    => ["$TMPDIR/".$allfiles[6]],
                                file8    => ["$TMPDIR/".$allfiles[7]],
                                file9    => ["$TMPDIR/".$allfiles[8]],
                                file10   => ["$TMPDIR/".$allfiles[9]],
                                file11   => ["$TMPDIR/".$allfiles[10]],
                                file12   => ["$TMPDIR/".$allfiles[11]],
                                file13   => ["$TMPDIR/".$allfiles[12]],
                                file14   => ["$TMPDIR/".$allfiles[13]],
                                file15   => ["$TMPDIR/".$allfiles[14]],
                                file16   => ["$TMPDIR/".$allfiles[15]],
                               ]
               
               );
  
  print " -> "; 
  print "(".$response->code.") :";
  print $response->content;
  
  if ($response->code == HTTP::Status::HTTP_REQUEST_TIMEOUT) {
      print "Connection timeout. Upload failed \n";
      exit 3;
    }
  if ($response->code == 500 ) {
      print "Bad Hostname, upload failed. Please check your internet connection. \n";
      exit 4;
    }
  
  print "\n\nSee your scan results at:\nhttp://www.linux-hardware-guide.com/hardware-profile/scan-".$sid."\n";
  
  
  if ($ARGV[0] eq "--silent") {
      #service mode -> do nothing
  }else{
      open_browser($sid);
  }
  exit 0;
  
}

sub open_browser {
    my $sid = shift;
    
    print "Trying to open scan results in browser...\n";
    
    if (-e "/usr/bin/sensible-browser") {
        system "sensible-browser http://www.linux-hardware-guide.com/hardware-profile/scan-$sid";
    }elsif (-e "/usr/bin/xdg-open") {
        system "sensible-browser http://www.linux-hardware-guide.com/hardware-profile/scan-$sid";
    }elsif (-e "/usr/bin/firefox") {
             system "firefox --new-tab http://www.linux-hardware-guide.com/hardware-profile/scan-$sid";
    }elsif (-e "/usr/bin/chromium-browser") {
             system "chromium-browser --app=http://www.linux-hardware-guide.com/hardware-profile/scan-$sid";
    }

    
}
  
sub check_root {
    
    if ( $< != 0 ) {
        #print "WARNING:\n";
        #print "========\n";
        print "(This script is running without root privileges. ";
        print "Harddisk performance can only be measured with root priveleges and therefore will be skipped.)\n";
        #print "\n";
        print "\n";
    }
}

sub create_attachment_string {
    
    foreach (@allfiles) {
        if (-e "$TMPDIR/$_") {
            $attachments .= "$TMPDIR/$_,";
        }
    }
    
    $attachments = substr($attachments,0,-1);
    return $attachments;
    
}

sub anonymize_data {
    
    # We do not need your IP or MAC addresses, therefore we filter them before uploading the files.
    # Serial Numbers of Equipment on the other hand might carry important 
    # information, e.g. if hardware compatibility changes for certain serial numbers
    # Therefore, serial numbers are currently not filtered
    
    foreach (@allfiles) {
        if (-e "$TMPDIR/$_") {
            
            open FILE_OUT, ">", "$TMPDIR/$_.clean";
            open FILE, "<", "$TMPDIR/$_";
            while ($line = <FILE>) {
                
                # Replace MAC adresses
                if ($line =~ m/(([0-9A-Fa-f]{2}:){5})[0-9A-Fa-f]{2}/) {
                    $line =~ s/(([0-9A-Fa-f]{2}:){5})[0-9A-Fa-f]{2}/00:11:22:33:44:55/g;
                }
                
                # Replace IP adresses, conservative filter used
                if ($line =~ m/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/) {
                    $line =~ s/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/192.168.0.0/g;
                }
                
                print FILE_OUT $line;

                
            }
            close FILE;
            close FILE_OUT;
            
            #overwrite log files with anonymized one
            $old = "$TMPDIR/$_.clean";
            $new = "$TMPDIR/$_";
            rename ( $old, $new );
            
        }
    }
    
    return;
    
}

sub check_unifying_receivers {
    #ToDo: This information should be stored in a separate file
    
    $path_solaar = `which solaar-cli`;
    if ($path_solaar eq "") {
        # tool not installed
    } else {
        
        system( 'echo "\n ------ solaar-cli output ------- \n" >> '.$TMPDIR.'/dmesg.txt');
        $cmd = substr($path_solaar,0,-1). " show >> $TMPDIR/dmesg.txt 2>> $TMPDIR/dmesg.txt ";
        system($cmd);
    
    }
}

sub check_graphics {
    #ToDo: This information should be stored in a separate file
    
    $path_xinput = `which xinput`;
    if ($path_solaar eq "") {
        # tool not installed
    } else {
        system( 'echo "\n ------ xinput ------- \n" >> '.$TMPDIR.'/dmesg.txt');
        $cmd = substr($path_xinput,0,-1). " >> $TMPDIR/dmesg.txt 2>> $TMPDIR/dmesg.txt ";
        system($cmd);
    }
    
    system( 'echo "\n ------ Xorg.log ------- \n" >> '.$TMPDIR.'/dmesg.txt');
    $cmd = "cat /var/log/Xorg.0.log >> $TMPDIR/dmesg.txt 2>> $TMPDIR/dmesg.txt ";
    system($cmd);

}

sub check_drives {
    #ToDo: This information should be stored in a separate file
    
    if (-e "/sys/block/") {
        system( 'echo "\n ------ ls -d /sys/block/s* ------- \n" >> '.$TMPDIR.'/dmesg.txt');
        $cmd0 = "ls -d /sys/block/s* >> $TMPDIR/dmesg.txt 2>> $TMPDIR/dmesg.txt ";
        system( 'echo "\n ------ /sys/block/s*/device/model ------- \n" >> '.$TMPDIR.'/dmesg.txt');
        $cmd1 = "cat /sys/block/s*/device/model >> $TMPDIR/dmesg.txt 2>> $TMPDIR/dmesg.txt ";
        system($cmd0);
        system($cmd1);
    }
    
}


sub misc_stats {
    
    # Adding some anonymous stats 
    
    system( 'echo "\n ------ STATS ------- \n" >> '.$TMPDIR.'/version.txt');
    system( 'echo "LHG_VERSION = '.$VERSION.' \n" >> '.$TMPDIR.'/version.txt');
    system( 'echo "UID = '.$uid.' \n" >> '.$TMPDIR.'/version.txt');
    system( 'echo "LHGUID = '.$USERID.' \n" >> '.$TMPDIR.'/version.txt');
    system( 'echo "LHGUIDDE = '.$USERIDDE.' \n" >> '.$TMPDIR.'/version.txt');
    system( 'echo "COMMENTID = '.$COMMENTID.' \n" >> '.$TMPDIR.'/version.txt');
    system( 'echo "USER_MAIL = '.$umail.' \n" >> '.$TMPDIR.'/version.txt');
    system( 'echo "\n ------ PCIDATA ------ \n" >> '.$TMPDIR.'/version.txt');
    
    if (-e "/var/spool/lhg-tools/pcidata") {
        system( 'cat /var/spool/lhg-tools/pcidata >> '.$TMPDIR.'/version.txt');
    }
    system( 'echo "\n ------ USBDATA ------ \n" >> '.$TMPDIR.'/version.txt');
    if (-e "/var/spool/lhg-tools/usbdata") {
        system( 'cat /var/spool/lhg-tools/usbdata >> '.$TMPDIR.'/version.txt');
    }

}

sub check_configuration_file {
    
    $filename = '/etc/lhg-tools.conf';
    
    if (-e $filename) {
        # file exists, read configuration
        $uid = get_conf_value("ANONYMOUS_USER_ID");
        $umail = get_conf_value("USER_EMAIL");
        
    }else {
        #print "not existing: ( $< ) ";
        #create if root
        if ( $< == 0 ) {
            
            my @chars = (0 .. 9, "A".."Z", "a".."z");
            my $rndstring;
            $rndstring .= $chars[rand @chars] for 1..16;

            $UID = $rndstring;
            
            my $file = "/etc/lhg-tools.conf";
            open(FILE, '>'.$file); 
            
            print FILE "# This is the configuration file of the Linux-Hardware-Guide tools\n";
            print FILE "# \n";
            print FILE "
# Every user gets an anonymous user id assigned to allow checking 
# his own upload results
# ID is set by ANONYMOUS_USER_ID
                
ANONYMOUS_USER_ID = $UID
                
# Your account can be linked with your email address. This way we can 
# contact you, if we have questions regarding your uploaded hardware
# data.
                
USER_EMAIL = unknown\@null.com
                
";

# close the file.
close FILE;
            
            
        }
    }
    
}

sub get_conf_value {
    
    my $confstrg = shift;
    my $confstrgl = length($confstrg);
    my $confvalue;
    
    open FILE, "/etc/lhg-tools.conf";
  
    while (<FILE>) {
        #print "S: $_ ";  
      if ( substr($_,0,$confstrgl) eq $confstrg) {
          #print $_;
          $confvalue = $_;
          $confvalue =~ s/$confstrg//;
          $confvalue =~ s/=//;
          $confvalue =~ s/ //g;
          $confvalue =~ s/(\r)|(\n)//g;
      }
    }
    close FILE;
    
    #print "Val: $confvalue";
    return $confvalue;
}

sub read_dmi {
    
    system( 'echo "\n ------ DMI DATA ------ \n" >> '.$TMPDIR.'/dmesg.txt');
    
    if ( $< == 0 ) { 
        system ("dmidecode >> $TMPDIR/dmesg.txt");
    }
}

sub interpret_commandline_options {
    
    $numArgs = $#ARGV + 1;
 
    foreach $argnum (0 .. $#ARGV) {
        
        # LHG userid was provided
        if (substr($ARGV[$argnum],0,2) eq "-u" ) {
            $USERID = substr($ARGV[$argnum],2);
        }
        
        # LHG.de userid was provided
        if (substr($ARGV[$argnum],0,2) eq "-d" ) {
            $USERIDDE = substr($ARGV[$argnum],2);
        }

        # Link with comment
        if (substr($ARGV[$argnum],0,2) eq "-c" ) {
            $COMMENTID = substr($ARGV[$argnum],2);
        }

    }

}
