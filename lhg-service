#!/usr/bin/perl

# regular check of hardware, if new hardware is found data is uploaded 
# Linux-Hardware-Guide database

# Currently only checking PCI and USB devices

$sid = $ARGV[0];

# Flag, if new hardware is found
$found_new_hardware = 0;

check_root();
check_spool();

# ToDo: check if last upload failed -> $found_new_hardware = 1;

create_fingerprint_pci();
create_fingerprint_usb();

#print "PCI: \n";
#print "Known: @known_pci_array \n";
#print "Scan: @foundarray_pci";

#print "\nUSB: \n";
#print "Known: @known_usb_array \n";
#print "@foundarray_usb";

check_for_new_ids();

if ($found_new_hardware == 1) {
    upload_data();
} else {
    print "No new hardware found \n";
}
make_clean();

exit 0;


#
# create_fingerprint_pci
#
#   read pci IDs of hardware
#

sub create_fingerprint_pci {
    
    system ("mkdir -p /tmp/.LHG_".$sid);
    system ("lspci -nnk > /tmp/.LHG_".$sid."/lspci.txt");
    
    open(FILE, "<", "/tmp/.LHG_".$sid."/lspci.txt");
    open(FILEN, "<", "/tmp/.LHG_".$sid."/lspci.txt");
    $nextline=<FILEN>;
    $i=0;
    #print "PCI Fingerprint: \n";
    while ( <FILE> ) {
        $nextline = <FILEN>;
        #print "Line: $_";
        
        $pciid   = grab_pciid($_);
        if ($pciid != "")  { 
            #print "PCIID: $pciid \n";
            $subsystemid   = grab_subsystemid($nextline);
            #print "Subsystem: $subsystemid \n";
        }
        

        
        if ($pciid != "")  { 
            #print "$pciid,";
            
            @foundarray_pci = (@foundarray_pci, $pciid);

        }
            
        #        
        #
    }
    
    #print "\n";
    
}


sub grab_subsystemid {
    my $line = shift;
    
    #print "-------\nLine: $line ";

    if ( ($line =~ m/Subsystem/) and ($line =~ m/\w\w\w\w:\w\w\w\w/) )  {
        my $pciid = substr($line,$-[0],9);
        #print "PCIID: $pciid \n";
        return $pciid;
    } else {
        #print "   no match \n";
    }
    
}

#
#
###  USB subroutines
#
#

sub create_fingerprint_usb {
    
    system ("lsusb  > /tmp/.LHG_".$sid."/lsusb.txt");

    open(FILE, "<", "/tmp/.LHG_".$sid."/lsusb.txt");
    $i=0;
    
    #print "USB Fingerprint: \n";
    while ( <FILE> ) {
        #print "Line: $_ \n";
        
        $usbid   = grab_usbid($_);
        #$usbname = grab_usbname($_);
        
        if ($usbid ne "") { 
            #print "$usbid,";
            @foundarray_usb = (@foundarray_usb, $usbid);
        }
        
        $i++;
        #print "\n";
    }
}

sub grab_usbid {
    $line = shift;
    
    #print "-------\nLine: $line ";

    if ($line =~ m/\w\w\w\w:\w\w\w\w/) {
        return substr($line,$-[0],9);
    } else {
        #print "   no match \n";
    }
    
}

sub grab_pciid {
    $line = shift;
    
    #print "-------\nLine: $line ";

    if ( ($line =~ m/\w\w\w\w:\w\w\w\w/) and !($line =~ m/Subsystem/) )  {
        $pciid = substr($line,$-[0],9);
        #print "PCIID: $pciid \n";
        return $pciid;
    } else {
        #print "   no match \n";
    }
    
}

sub check_root {
    
    if ( $< != 0 ) {
        #print "WARNING:\n";
        #print "========\n";
        print "Sorry! This script needs to be running with root privileges. ";
        print "\n";
        exit 1;
    }
}

sub check_spool {
    
    if ( -e "/var/spool/lhg-tools/pcidata" ) {
        #print "pcidata exists";
        
        # read in known data from spool file
        @known_pci_array = lhg_readdata("/var/spool/lhg-tools/pcidata");
    
    } else {
        #print "pcidata does not exist";
        $found_new_hardware = 1;
        system ("mkdir -p /var/spool/lhg-tools/");
        system ("touch /var/spool/lhg-tools/pcidata");
        system ('echo "# List of PCI data \n" >> /var/spool/lhg-tools/pcidata');
    }
    
    if ( -e "/var/spool/lhg-tools/usbdata" ) {
        #print "usbdata exists";
        @known_usb_array = lhg_readdata("/var/spool/lhg-tools/usbdata");

    } else {
        #print "usbdata does not exist";
        $found_new_hardware = 1;
        system ("mkdir -p /var/spool/lhg-tools/");
        system ("touch /var/spool/lhg-tools/usbdata");
        system ('echo "# List of USB data \n" >> /var/spool/lhg-tools/usbdata');
        
        # read in known data from spool file

    }
}

sub make_clean {
    
    # ToDo: cleanup files
}

sub lhg_readdata {
    
    $FILE = shift;
    @data_array = ();
    open(FILE, $FILE);
    while (<FILE>) {
        
        if (substr($_,0,1) eq "#") {
            # skip comment lines
        
        } else {
            $id = $_;
            $id =~ s/(\r)|(\n)//g;
            @data_array = (@data_array, $id);
        }
    }
    # ToDo: read data from file
    
    return  @data_array;
}

sub check_for_new_ids {
    
    #print "\n";
    
    # compare PCI IDs
    foreach (@foundarray_pci)
    {
        $searchfor = $_ ;
        #print "checking $searchfor ...";
        #if ($_ ~~ @known_pci_array) {
        if ( grep( /^${searchfor}/, @known_pci_array ) ) {
            #print "found \n";
        }else {
            #print "not found \n";
            $found_new_hardware = 1;
            # add to file
            system ('echo "'.$searchfor.'" >> /var/spool/lhg-tools/pcidata');

        }
    }
    
    # compare USB IDs
    foreach (@foundarray_usb)
    {
        $searchfor = $_ ;
        #print "checking $searchfor ...";
        #if ($_ ~~ @known_usb_array) {
        if ( grep( /^${searchfor}/, @known_usb_array ) ) {
            #print "found \n";
        }else {
            #print "not found \n";
            $found_new_hardware = 1;
            # add to file
            system ('echo "'.$searchfor.'" >> /var/spool/lhg-tools/usbdata');

        }
    }

}

sub upload_data {
    
    print "found new HW -> starting upload \n";
    
    if ( -e "./scan_hardware") {
        
        print "executing HW scan \n";
        system ("./scan_hardware");
        
    }elsif ( -e "/usr/bin/scan_hardware") {
        
        print "executing HW scan \n";
        system ("/usr/bin/scan_hardware");
        
    }
    
}

